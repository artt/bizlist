{"version":3,"sources":["SearchBox.js","Card.js","CardList.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchchange","type","placeholder","onChange","Card","entry","className","fullname","t","remark","call","split","map","item","i","href","phonetext","trim","match","website","target","fullurl","tmp","indexOf","startPos","endPos","length","substring","trimURL","CardList","entries","App","onSearchChange","event","setState","searchfield","value","toLowerCase","state","name","includes","this","keyword","facebook","line","filteredEntries","filter","filterEntry","response","reducedResponse","JSON","parse","replace","feed","display","color","email","fetch","then","text","responsetext","processResponse","React","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.466830f8.chunk.js","sourcesContent":["import React from 'react';\n\nfunction SearchBox({searchchange}) {\n\treturn(\n\t\t<div>\n\t\t\t<input\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='company name'\n\t\t\t\tonChange={searchchange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\nimport './style.css';\n\n// name, fullname, remark, call, website, keyword, facebook, line, email, color\n\nfunction trimURL(fullurl) {\n\tconst tmp = fullurl.indexOf('www.')   \n  let startPos = tmp + 4  \n  if (tmp === -1) {  \n    startPos = fullurl.indexOf('//') + 2    \n  }   \n  let endPos = fullurl.indexOf('/', startPos) \n  if (endPos == -1) { \n    endPos = fullurl.length \n  }   \n  return fullurl.substring(startPos, endPos)  \n}\n\nfunction trimPhone(phonetext) {\n  phonetext = phonetext.trim()\n  const patt = /(\\d{4}|\\d-\\d{4}-\\d{4}|\\d{3}-\\d{3}-\\d{4}|\\d{3}-\\d{3}-\\d{3})/;\n  const tocall = phonetext.match(patt)[0];\n  return tocall;\n}\n\nfunction Card({entry}) {\n\treturn(\n\t\t<div className=\"card\">\n\t\t\t<h2>{entry.fullname.t + (entry.remark.t === '' ? '' : ' (' + entry.remark.t + ')')}</h2>\n\t\t\t<p>{\n\t\t\t\tentry.call.t.split('\\n').map((item, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<a href={`tel:${trimPhone(item)}`}>{item}</a><br />\n\t\t\t\t\t\t</span>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}</p>\n\t\t\t<p><a href={entry.website.t} target='_blank'>{trimURL(entry.website.t)}</a></p>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nfunction CardList({entries}) {\n\treturn(\n\t\t<div>\n\t\t\t{\n\t\t\t\tentries.map((entry, i) => {\n\t\t\t\t\treturn (<Card\n\t\t\t\t\t\t\t\t\t\tentry={entries[i]}\n\t\t\t\t\t\t\t\t\t/>);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\nimport SearchBox from './SearchBox'\nimport CardList from './CardList'\nimport './style.css';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      entries: [],\n      searchfield: ''\n    };\n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchfield: event.target.value.toLowerCase()})\n  }\n\n  filterEntry(entry) {\n    return entry.name.t.toLowerCase().includes(this.state.searchfield)\n      || entry.fullname.t.toLowerCase().includes(this.state.searchfield)\n      || entry.keyword.t.toLowerCase().includes(this.state.searchfield)\n      || entry.facebook.t.toLowerCase().includes(this.state.searchfield)\n      || entry.line.t.toLowerCase().includes(this.state.searchfield)\n      || entry.website.t.toLowerCase().includes(this.state.searchfield)\n  }\n\n  render() {\n    const {entries} = this.state;\n    const filteredEntries = entries.filter(entry => this.filterEntry(entry));\n    if (!entries.length) {\n      return <h1>Loading</h1>\n    }\n    else {\n      return (\n        <div className=\"App\">\n          <h1>Hiiii</h1>\n          <SearchBox searchchange={this.onSearchChange} />\n          <CardList entries={filteredEntries} />\n        </div>\n      );\n    }\n  }\n\n  processResponse(response) {\n    let reducedResponse = JSON.parse(response.replace(/gsx\\$|\\$/g,'')).feed.entry.filter(entry => {return entry.display.t === 'x'});\n    this.setState({entries: reducedResponse.map(({call, color, email, facebook, fullname, keyword, line, name, remark, website}) => \n                                                ({call, color, email, facebook, fullname, keyword, line, name, remark, website}))})\n  }\n\n  componentDidMount() {\n    fetch('https://spreadsheets.google.com/feeds/list/' + \n        '***REMOVED***/***REMOVED***/public/values?alt=json')\n      .then(response => response.text())\n      .then(responsetext => this.processResponse(responsetext));\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}