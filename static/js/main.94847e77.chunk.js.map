{"version":3,"sources":["SearchBox.js","Card.js","CardList.js","App.js","serviceWorker.js","index.js"],"names":["handlefocus","event","target","select","SearchBox","searchchange","className","type","placeholder","onChange","onFocus","Card","entry","fullname","t","remark","call","split","map","item","i","href","phonetext","trim","match","website","fullurl","tmp","indexOf","startPos","endPos","length","substring","trimURL","CardList","entries","App","onSearchChange","setState","searchfield","value","toLowerCase","state","name","includes","this","keyword","facebook","line","filteredEntries","filter","filterEntry","id","response","reducedResponse","JSON","parse","replace","feed","display","color","email","fetch","then","text","responsetext","processResponse","React","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94847e77.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction SearchBox({searchchange}) {\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<input\r\n\t\t\t\tclassName='searchbox'\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='company name'\r\n\t\t\t\tonChange={searchchange}\r\n\t\t\t\tonFocus={handlefocus}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nfunction handlefocus(event) {\r\n\tevent.target.select();\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './style.css';\r\n\r\n// name, fullname, remark, call, website, keyword, facebook, line, email, color\r\n\r\nfunction trimURL(fullurl) {\r\n\tconst tmp = fullurl.indexOf('www.')   \r\n\tlet startPos = tmp + 4  \r\n\tif (tmp === -1) {  \r\n\t\tstartPos = fullurl.indexOf('//') + 2    \r\n\t}   \r\n\tlet endPos = fullurl.indexOf('/', startPos) \r\n\tif (endPos == -1) { \r\n\t\tendPos = fullurl.length \r\n\t}   \r\n\treturn fullurl.substring(startPos, endPos)  \r\n}\r\n\r\nfunction trimPhone(phonetext) {\r\n\tphonetext = phonetext.trim()\r\n\tconst patt = /(\\d{4}|\\d-\\d{4}-\\d{4}|\\d{3}-\\d{3}-\\d{4}|\\d{3}-\\d{3}-\\d{3})/;\r\n\tconst tocall = phonetext.match(patt)[0];\r\n\treturn tocall;\r\n}\r\n\r\nfunction Card({entry}) {\r\n\treturn(\r\n\t\t<div className='card'>\r\n\t\t\t<div className='title'>{entry.fullname.t + (entry.remark.t && (' (' + entry.remark.t + ')'))}</div>\r\n\t\t\t<div>{ entry.call.t &&\r\n\t\t\t\tentry.call.t.split('\\n').map((item, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<a href={`tel:${trimPhone(item)}`}>\r\n\t\t\t\t\t\t\t<span className='phone'>\r\n\t\t\t\t\t\t\t\t{item}<br />\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}</div>\r\n\t\t\t<div>{ entry.website.t &&\r\n\t\t\t\t<a href={entry.website.t} target='_blank'>\r\n\t\t\t\t\t<span className='website'>\r\n\t\t\t\t\t\t{trimURL(entry.website.t)}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</a>\r\n\t\t\t}</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction CardList({entries}) {\r\n\treturn(\r\n\t\t<div className='container'>\r\n\t\t\t{\r\n\t\t\t\tentries.map((entry, i) => {\r\n\t\t\t\t\treturn (<Card\r\n\t\t\t\t\t\t\t\t\t\tentry={entries[i]}\r\n\t\t\t\t\t\t\t\t\t/>);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport SearchBox from './SearchBox'\r\nimport CardList from './CardList'\r\nimport './style.css';\r\n\r\nclass App extends React.Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tentries: [],\r\n\t\t\tsearchfield: ''\r\n\t\t};\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value.toLowerCase()})\r\n\t}\r\n\r\n\tfilterEntry(entry) {\r\n\t\treturn entry.name.t.toLowerCase().includes(this.state.searchfield)\r\n\t\t\t|| entry.fullname.t.toLowerCase().includes(this.state.searchfield)\r\n\t\t\t|| entry.keyword.t.toLowerCase().includes(this.state.searchfield)\r\n\t\t\t|| entry.facebook.t.toLowerCase().includes(this.state.searchfield)\r\n\t\t\t|| entry.line.t.toLowerCase().includes(this.state.searchfield)\r\n\t\t\t|| entry.website.t.toLowerCase().includes(this.state.searchfield)\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {entries} = this.state;\r\n\t\tconst filteredEntries = entries.filter(entry => this.filterEntry(entry));\r\n\t\tif (!entries.length) {\r\n\t\t\treturn <h1>Loading</h1>\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn (\r\n\t\t\t\t<div className='App'>\r\n\t\t\t\t\t<div id='left'>\r\n\t\t\t\t\t\t<div className='logo'>BizList</div>\r\n\t\t\t\t\t\t<SearchBox searchchange={this.onSearchChange} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div id='right'>\r\n\t\t\t\t\t\t<CardList entries={filteredEntries} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tprocessResponse(response) {\r\n\t\tlet reducedResponse = JSON.parse(response.replace(/gsx\\$|\\$/g,'')).feed.entry.filter(entry => {return entry.display.t === 'x'});\r\n\t\tthis.setState({entries: reducedResponse.map(({call, color, email, facebook, fullname, keyword, line, name, remark, website}) => \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t({call, color, email, facebook, fullname, keyword, line, name, remark, website}))})\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://spreadsheets.google.com/feeds/list/' + \r\n\t\t\t\t'***REMOVED***/***REMOVED***/public/values?alt=json')\r\n\t\t\t.then(response => response.text())\r\n\t\t\t.then(responsetext => this.processResponse(responsetext));\r\n\t}\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}